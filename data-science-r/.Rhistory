# Drop insignificant variables, refit if needed
# Predict and calculate accuracy
pred_logit <- predict(logit_model, type = "response")
pred_class <- ifelse(pred_logit > 0.5, 1, 0)
confusionMatrix(as.factor(pred_class), data$admit)
# 6. Decision Tree
tree_model <- rpart(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, method = "class")
rpart.plot(tree_model)
pred_tree <- predict(tree_model, type = "class")
confusionMatrix(pred_tree, data$admit)
# 7. SVM
svm_model <- svm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, probability = TRUE)
pred_svm <- predict(svm_model, data)
confusionMatrix(as.factor(pred_svm), as.factor(data$admit))
# 9. Save Results (optional)
write.csv(data, "admission_data_cleaned.csv")
# Logistic Regression
logit_model <- glm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, family = binomial)
pred_logit <- predict(logit_model, type = "response")
pred_class_logit <- if(pred_logit > 0.5, 1, 0)
pred_class_logit <- ifelse(pred_logit > 0.5, 1, 0)
cm_logit <- caret::confusionMatrix(as.factor(pred_class_logit), data$admit)
library(rpart)
tree_model <- rpart(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, method = "class")
pred_tree <- predict(tree_model, type = "class")
cm_tree <- caretconfusionMatrix(pred_tree, data$admit)
cm_tree <- confusionMatrix(pred_tree, data$admit)
svm_model <- svm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, probability = TRUE)
pred_svm <- predict(svm_model, data)
cm_svm <- caret::confusionMatrix(as.factor(pred_svm), as.factor(data$admit))
model_names <- c("Logistic Regression", "Decision Tree", "SVM")
accuracy <- c(cm_logit$overall["Accuracy"], cm_tree$overall["Accuracy"], cm_svm$overall["Accuracy"])
sensitivity <- c(cm_logit$byClass["Sensitivity"], cm_tree$byClass["Sensitivity"], cm_svm$byClass["Sensitivity"])
specificity <- c(cm_logit$byClass["Specificity"], cm_tree$byClass["Specificity"], cm_svm$byClass["Specificity"])
kappa <- c(cm_logit$overall["Kappa"], cm_tree$overall["Kappa"], cm_svm$overall["Kappa"])
results_table <- data.frame(
Model = model_names,
Accuracy = round(accuracy, 3),
Sensitivity = round(sensitivity, 3),
Specificity = round(specificity, 3),
Kappa = round(kappa, 3)
)
print(results_table)
data <- read_csv("College_admission.csv")
str(data)
# 3. Data Cleaning
data <- data %>%
mutate(
admit = as.factor(admit),
ses = as.factor(ses),
Gender_Male = as.factor(Gender_Male),
Race = as.factor(Race),
rank = as.factor(rank)
)
summary(data)
sapply(data, function(x) sum(is.na(x)))
# 4. Descriptive Analysis
# GPA Categorization
data <- data %>%
mutate(GPA_cat = case_when(
gpa < 3 ~ "Low",
gpa >= 3 & gpa < 3.7 ~ "Medium",
gpa >= 3.7 ~ "High"
))
# Admission rate by GPA_cat
gpa_admit <- data %>%
group_by(GPA_cat) %>%
summarise(Admit_Rate = mean(as.numeric(as.character(admit))))
ggplot(gpa_admit, aes(x = GPA_cat, y = Admit_Rate)) +
geom_point(size = 4) +   # Or any other positive number
labs(title = "Admission Rate by GPA Category", x = "GPA Category", y = "Admission Rate")
# GRE Categorization
data <- data %>%
mutate(GRE_cat = case_when(
gre <= 440 ~ "Low",
gre > 440 & gre <= 580 ~ "Medium",
gre > 580 ~ "High"
))
# Cross-tab GRE_cat vs admit
table(data$GRE_cat, data$admit)
ggplot(data, aes(x = GRE_cat, fill = admit)) +
geom_bar(position = "fill") +
labs(title = "Admission Proportion by GRE Category", x = "GRE Category", y = "Proportion")
#5. Logistic Regression
logit_model <- glm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, family = binomial)
summary(logit_model)
# Drop insignificant variables, refit if needed
# Predict and calculate accuracy
pred_logit <- predict(logit_model, type = "response")
pred_class <- ifelse(pred_logit > 0.5, 1, 0)
confusionMatrix(as.factor(pred_class), data$admit)
# 6. Decision Tree
tree_model <- rpart(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, method = "class")
rpart.plot(tree_model)
pred_tree <- predict(tree_model, type = "class")
confusionMatrix(pred_tree, data$admit)
# 7. SVM
svm_model <- svm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, probability = TRUE)
pred_svm <- predict(svm_model, data)
confusionMatrix(as.factor(pred_svm), as.factor(data$admit))
# 8. Model Comparison
# Collect and compare accuracy from all three models
# Logistic Regression
logit_model <- glm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, family = binomial)
pred_logit <- predict(logit_model, type = "response")
pred_class_logit <- ifelse(pred_logit > 0.5, 1, 0)
cm_logit <- caret::confusionMatrix(as.factor(pred_class_logit), data$admit)
# Decision Tree
library(rpart)
tree_model <- rpart(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, method = "class")
pred_tree <- predict(tree_model, type = "class")
cm_tree <- confusionMatrix(pred_tree, data$admit)
# SVM
library(e1071)
svm_model <- svm(admit ~ gre + gpa + ses + Gender_Male + Race + rank, data = data, probability = TRUE)
pred_svm <- predict(svm_model, data)
cm_svm <- caret::confusionMatrix(as.factor(pred_svm), as.factor(data$admit))
# Create summary table
model_names <- c("Logistic Regression", "Decision Tree", "SVM")
accuracy <- c(cm_logit$overall["Accuracy"], cm_tree$overall["Accuracy"], cm_svm$overall["Accuracy"])
sensitivity <- c(cm_logit$byClass["Sensitivity"], cm_tree$byClass["Sensitivity"], cm_svm$byClass["Sensitivity"])
specificity <- c(cm_logit$byClass["Specificity"], cm_tree$byClass["Specificity"], cm_svm$byClass["Specificity"])
kappa <- c(cm_logit$overall["Kappa"], cm_tree$overall["Kappa"], cm_svm$overall["Kappa"])
results_table <- data.frame(
Model = model_names,
Accuracy = round(accuracy, 3),
Sensitivity = round(sensitivity, 3),
Specificity = round(specificity, 3),
Kappa = round(kappa, 3)
)
print(results_table)
save.image("~/R p/Project 5 Workspace.RData")
getwd()
library(tidyverse)
library(lubridate)
library(cluster)
library(factoextra)
# 1. Load Libraries
install.packages(factoextra)
install.packages(NbClust)
install.packages(factoextra)
install.packages(NbClust)
install.packages("factoextra")
install.packages("NbClust")
library(tidyverse)
library(lubridate)
library(cluster)
library(factoextra)
library(NbClust)
# 2. Data Import
data <- read_csv("Ecommerce.csv")
str(data)
# Check for and remove rows with missing CustomerID
data <- data %>% filter(!is.na(CustomerID))
# Remove rows with invalid quantities or prices
data <- data %>% filter(Quantity > 0, UnitPrice > 0)
# Convert InvoiceDate to datetime format
data$InvoiceDate <- mdy(data$InvoiceDate)
if ("...9" %in% names(data)) {
data <- data %>% select(-"...9")
}
# Convert InvoiceDate to datetime format
data$InvoiceDate <- dmy(data$InvoiceDate)
str(data)
problems(data)
View(data)
View(data)
data <- read_csv("Ecommerce.csv")
# Check for and remove rows with missing CustomerID
data <- data %>% filter(!is.na(CustomerID))
# Remove rows with invalid quantities or prices
data <- data %>% filter(Quantity > 0, UnitPrice > 0)
# Convert InvoiceDate to datetime format
data$InvoiceDate <- parse_date_time(data$InvoiceDate, orders = c("d-b-y", "d/m/y", "d-m-y"))
# Remove the extra column (...9) if it exists
if ("...9" %in% names(data)) {
data <- data %>% select(-"...9")
}
str(data)
# Define snapshot date (last date in dataset)
snapshot_date <- max(data$InvoiceDate)
rfm <- data %>%
group_by(CustomerID) %>%
summarise(
Recency = as.numeric(snapshot_date - max(InvoiceDate)),
Frequency = n_distinct(InvoiceNo),
MonetaryValue = sum(Quantity * UnitPrice),
.groups = "drop"
)
# Summary statistics for RFM features
summary(rfm)
# Histograms for RFM features
hist(rfm$Recency, main = "Histogram of Recency", xlab = "Recency")
hist(rfm$Frequency, main = "Histogram of Frequency", xlab = "Frequency")
hist(rfm$MonetaryValue, main = "Histogram of Monetary Value", xlab = "Monetary Value")
# Scatterplots (optional)
plot(rfm$Recency, rfm$MonetaryValue, main = "Recency vs Monetary Value")
hist(log1p(rfm$Frequency), main = "Histogram of Log(Frequency)", xlab = "Log(Frequency)")
hist(log1p(rfm$MonetaryValue), main = "Histogram of Log(Monetary Value)", xlab = "Log(Monetary Value)")
ggplot(rfm, aes(x = Recency, y = MonetaryValue)) +
geom_point(alpha = 0.3, position = "jitter") +
scale_y_log10() +
labs(title = "Recency vs Log(Monetary Value)", x = "Recency", y = "Log(Monetary Value)")
rfm <- rfm %>%
mutate(
log_Frequency = log1p(Frequency),
log_MonetaryValue = log1p(MonetaryValue)
)
rfm_scaled <- scale(rfm[, c("Recency", "log_Frequency", "log_MonetaryValue")])
# Summary statistics for RFM features
summary(rfm)
hist(rfm$Recency, main = "Histogram of Recency", xlab = "Recency")
hist(rfm$log_Frequency, main = "Histogram of Log(Frequency)", xlab = "Log(Frequency)")
hist(rfm$log_MonetaryValue, main = "Histogram of Log(Monetary Value)", xlab = "Log(Monetary Value)")
ggplot(rfm, aes(x = Recency, y = log_MonetaryValue)) +
geom_point(alpha = 0.3, position = "jitter") +
labs(title = "Recency vs Log(Monetary Value)", x = "Recency", y = "Log(Monetary Value)")
fviz_nbclust(rfm_scaled, kmeans, method = "wss") +
labs(subtitle = "Elbow method for K-Means")
fviz_nbclust(rfm_scaled, kmeans, method = "silhouette") +
labs(subtitle = "Silhouette method for K-Means")
# Choose K based on the above methods (example: K = 3)
k <- 3
# Run K-Means clustering
kmeans_model <- kmeans(rfm_scaled, centers = k, nstart = 25)
# Visualize K-Means clusters
fviz_cluster(kmeans_model, data = rfm_scaled, geom = "point", ellipse.type = "convex")
# Calculate distance matrix
distance <- dist(rfm_scaled, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(distance, method = "ward.D2")
# Plot dendrogram
plot(hc, cex = 0.6, hang = -1)
rect.hclust(hc, k = k, border = 2:5)
# Cut the dendrogram to create clusters
cluster_hc <- cutree(hc, k = k)
# Add cluster assignments to RFM data
rfm$KMeans_Cluster <- as.factor(kmeans_model$cluster)
rfm$HC_Cluster <- as.factor(cluster_hc)
kmeans_summary <- rfm %>%
group_by(KMeans_Cluster) %>%
summarise(across(c(Recency, log_Frequency, log_MonetaryValue), mean), .groups = "drop")
print("K-Means Cluster Profiles:")
print(kmeans_summary)
# Profile clusters (Hierarchical)
hc_summary <- rfm %>%
group_by(HC_Cluster) %>%
summarise(across(c(Recency, log_Frequency, log_MonetaryValue), mean), .groups = "drop")
print("Hierarchical Cluster Profiles:")
print(hc_summary)
cluster_sizes <- table(rfm$KMeans_Cluster)
largest_cluster <- names(cluster_sizes[which.max(cluster_sizes)])
# Filter data for the largest cluster
largest_cluster_data <- rfm_scaled[rfm$KMeans_Cluster == largest_cluster, ]
# Re-cluster the largest cluster into 2 sub-clusters
kmeans_reclustered <- kmeans(largest_cluster_data, centers = 2, nstart = 25)
rfm$Reclustered <- ifelse(rfm$KMeans_Cluster == largest_cluster, paste0(largest_cluster, "_", kmeans_reclustered$cluster), as.character(rfm$KMeans_Cluster))
reclustered_summary <- rfm %>%
group_by(Reclustered) %>%
summarise(across(c(Recency, log_Frequency, log_MonetaryValue), mean), .groups = "drop")
print("Re-Clustered Profiles:")
print(reclustered_summary)
save.image("~/R p/Project 6 Worskspace.RData")
install.packages("readxl")
library(tidyverse)
library(readxl)
library(car)
library(lubridate)
# 2. Data Import
data <- read_xlsx("HospitalCosts.xlsx", sheet = "HospitalCosts")
# 2. Data Import
data <- read_xlsx("HospitalCosts.xlsx")
getwd()
# 2. Data Import
data <- read_xl("HospitalCosts.xlsx")
# 2. Data Import
data <- read_xl("1555054100_ospitalCosts.xlsx")
# 2. Data Import
data <- read_xl("1555054100_hospitalCosts.xlsx")
# 2. Data Import
data <- read_xlsx("1555054100_hospitalCosts.xlsx")
str(data)
# Convert categorical variables to factors
data$FEMALE <- as.factor(data$FEMALE)
data$RACE <- as.factor(data$RACE)
data$APRDRG <- as.factor(data$APRDRG)
# Check for missing values
sapply(data, function(x) sum(is.na(x)))
# Check for outliers/invalid values (example)
summary(data$AGE)
summary(data$LOS)
summary(data$TOTCHG)
data <- data %>% filter(!is.na(RACE))
age_exp <- data %>%
group_by(AGE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
print(age_exp)
age_freq <- data %>%
group_by(AGE) %>%
summarise(Count = n(), .groups = "drop")
print(age_freq)
aprdrg_exp <- data %>%
group_by(APRDRG) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
print(aprdrg_exp)
model_race <- lm(TOTCHG ~ RACE, data = data)
anova(model_race)
age_gender_exp <- data %>%
group_by(AGE, FEMALE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
print(age_gender_exp)
model_los <- lm(LOS ~ AGE + FEMALE + RACE, data = data)
summary(model_los)
# Variable Importance
model_full <- lm(TOTCHG ~ AGE + FEMALE + LOS + RACE + APRDRG, data = data)
summary(model_full)
age_exp_sorted <- age_exp %>%
arrange(desc(Mean_Cost))
print(age_exp_sorted)
aprdrg_summary <- data %>%
group_by(APRDRG) %>%
summarise(
Count = n(),
Mean_Cost = mean(TOTCHG),
.groups = "drop"
) %>%
arrange(desc(Count), desc(Mean_Cost))
print(head(aprdrg_summary))
model_race <- lm(TOTCHG ~ RACE, data = data)
anova(model_race)
age_gender_exp <- data %>%
group_by(AGE, FEMALE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
print(age_gender_exp)
model_los <- lm(LOS ~ AGE + FEMALE + RACE, data = data)
summary(model_los)
model_full <- lm(TOTCHG ~ AGE + FEMALE + LOS + RACE + APRDRG, data = data)
summary(model_full)
ggplot(data, aes(x = TOTCHG)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribution of Hospital Costs", x = "Total Charges (TOTCHG)", y = "Count")
ggplot(data, aes(x = LOS, y = TOTCHG)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship Between Length of Stay and Hospital Costs", x = "Length of Stay (LOS)", y = "Total Charges (TOTCHG)")
race_exp <- data %>%
group_by(RACE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
ggplot(race_exp, aes(x = RACE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Mean Hospital Costs by Race", x = "Race", y = "Mean Total Charges")
ggplot(age_exp, aes(x = AGE, y = Mean_Cost)) +
geom_line() +
labs(title = "Mean Hospital Costs by Age", x = "Age", y = "Mean Total Charges")
gender_exp <- data %>%
group_by(FEMALE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
ggplot(gender_exp, aes(x = FEMALE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = "Mean Hospital Costs by Gender", x = "Gender (0=Male, 1=Female)", y = "Mean Total Charges")
ggplot(data, aes(x = TOTCHG)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
scale_x_log10() +
labs(title = "Distribution of Hospital Costs (Log Scale)", x = "Total Charges (Log10)", y = "Count")
ggplot(data, aes(x = LOS, y = TOTCHG)) +
geom_point(alpha = 0.3, position = "jitter") +
scale_y_log10() +
labs(title = "Relationship Between Length of Stay and Hospital Costs (Log Scale)", x = "Length of Stay (LOS)", y = "Total Charges (Log10)")
gender_summary <- data %>%
group_by(FEMALE) %>%
summarise(
Mean_Cost = mean(TOTCHG),
SE = sd(TOTCHG) / sqrt(n()),  # Standard Error
.groups = "drop"
)
ggplot(gender_summary, aes(x = FEMALE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "purple") +
geom_errorbar(aes(ymin = Mean_Cost - SE, ymax = Mean_Cost + SE), width = 0.2) +
labs(title = "Mean Hospital Costs by Gender", x = "Gender (0=Male, 1=Female)", y = "Mean Total Charges")
ggplot(data, aes(x = AGE, y = TOTCHG)) +
geom_boxplot() +
scale_y_log10() +
labs(title = "Hospital Costs by Age (Boxplot, Log Scale)", x = "Age", y = "Total Charges (Log10)")
# Distribution of Hospital Costs  (Log Scale)
ggplot(data, aes(x = TOTCHG)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
scale_x_log10() +
labs(title = "Distribution of Hospital Costs (Log Scale)", x = "Total Charges (Log10)", y = "Count")
# Relationship Between Length of Stay and Hospital Costs  (Log Scale and Jitter)
ggplot(data, aes(x = LOS, y = TOTCHG)) +
geom_point(alpha = 0.3, position = "jitter") +
scale_y_log10() +
labs(title = "Relationship Between Length of Stay and Hospital Costs (Log Scale)", x = "Length of Stay (LOS)", y = "Total Charges (Log10)")
# Mean Hospital Costs by Race
race_exp <- data %>%
group_by(RACE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
ggplot(race_exp, aes(x = RACE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Mean Hospital Costs by Race", x = "Race", y = "Mean Total Charges")
# Mean Hospital Costs by Age
ggplot(age_exp, aes(x = AGE, y = Mean_Cost)) +
geom_line() +
labs(title = "Mean Hospital Costs by Age", x = "Age", y = "Mean Total Charges")
#Mean Hospital Costs by Age (Boxplots)
ggplot(data, aes(x = AGE, y = TOTCHG)) +
geom_boxplot() +
scale_y_log10() +
labs(title = "Hospital Costs by Age (Boxplot, Log Scale)", x = "Age", y = "Total Charges (Log10)")
# Mean Hospital Costs by Gender (with Error Bars)
gender_summary <- data %>%
group_by(FEMALE) %>%
summarise(
Mean_Cost = mean(TOTCHG),
SE = sd(TOTCHG) / sqrt(n()),  # Standard Error
.groups = "drop"
)
ggplot(gender_summary, aes(x = FEMALE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "purple") +
geom_errorbar(aes(ymin = Mean_Cost - SE, ymax = Mean_Cost + SE), width = 0.2) +
labs(title = "Mean Hospital Costs by Gender", x = "Gender (0=Male, 1=Female)", y = "Mean Total Charges")
# -------------------------------------------------------
# 5. Save Results
# -------------------------------------------------------
write.csv(age_exp, "age_expenditure.csv", row.names = FALSE)
# Check for outliers/invalid values (example)
summary(data$AGE)
summary(data$LOS)
summary(data$TOTCHG)
# -------------------------------------------------------
# 3. Descriptive Analysis
# -------------------------------------------------------
# Age and Expenditure
age_exp_sorted <- age_exp %>%
arrange(desc(Mean_Cost))
print(age_exp_sorted)
# Most frequent age category
age_freq <- data %>%
group_by(AGE) %>%
summarise(Count = n(), .groups = "drop")
print(age_freq)
# APRDRG and Expenditure
aprdrg_summary <- data %>%
group_by(APRDRG) %>%
summarise(
Count = n(),
Mean_Cost = mean(TOTCHG),
.groups = "drop"
) %>%
arrange(desc(Count), desc(Mean_Cost))
print(head(aprdrg_summary))
# Race and Costs
model_race <- lm(TOTCHG ~ RACE, data = data)
anova(model_race)
# Age, Gender, and Costs
age_gender_exp <- data %>%
group_by(AGE, FEMALE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
print(age_gender_exp)
# LOS Prediction
model_los <- lm(LOS ~ AGE + FEMALE + RACE, data = data)
summary(model_los)
# Variable Importance
model_full <- lm(TOTCHG ~ AGE + FEMALE + LOS + RACE + APRDRG, data = data)
summary(model_full)
# -------------------------------------------------------
# 4. Visualizations
# -------------------------------------------------------
# Distribution of Hospital Costs  (Log Scale)
ggplot(data, aes(x = TOTCHG)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
scale_x_log10() +
labs(title = "Distribution of Hospital Costs (Log Scale)", x = "Total Charges (Log10)", y = "Count")
# Relationship Between Length of Stay and Hospital Costs  (Log Scale and Jitter)
ggplot(data, aes(x = LOS, y = TOTCHG)) +
geom_point(alpha = 0.3, position = "jitter") +
scale_y_log10() +
labs(title = "Relationship Between Length of Stay and Hospital Costs (Log Scale)", x = "Length of Stay (LOS)", y = "Total Charges (Log10)")
# Mean Hospital Costs by Race
race_exp <- data %>%
group_by(RACE) %>%
summarise(Mean_Cost = mean(TOTCHG), .groups = "drop")
ggplot(race_exp, aes(x = RACE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Mean Hospital Costs by Race", x = "Race", y = "Mean Total Charges")
# Mean Hospital Costs by Age
ggplot(age_exp, aes(x = AGE, y = Mean_Cost)) +
geom_line() +
labs(title = "Mean Hospital Costs by Age", x = "Age", y = "Mean Total Charges")
#Mean Hospital Costs by Age (Boxplots)
ggplot(data, aes(x = AGE, y = TOTCHG)) +
geom_boxplot() +
scale_y_log10() +
labs(title = "Hospital Costs by Age (Boxplot, Log Scale)", x = "Age", y = "Total Charges (Log10)")
# Mean Hospital Costs by Gender (with Error Bars)
gender_summary <- data %>%
group_by(FEMALE) %>%
summarise(
Mean_Cost = mean(TOTCHG),
SE = sd(TOTCHG) / sqrt(n()),  # Standard Error
.groups = "drop"
)
ggplot(gender_summary, aes(x = FEMALE, y = Mean_Cost)) +
geom_bar(stat = "identity", fill = "purple") +
geom_errorbar(aes(ymin = Mean_Cost - SE, ymax = Mean_Cost + SE), width = 0.2) +
labs(title = "Mean Hospital Costs by Gender", x = "Gender (0=Male, 1=Female)", y = "Mean Total Charges")
# -------------------------------------------------------
# 5. Save Results
# -------------------------------------------------------
write.csv(age_exp, "age_expenditure.csv", row.names = FALSE)
save.image("~/R p/Project 7 Workspace.RData")
load("C:/Users/ThapeloMasebe/OneDrive - Ogilvy/Documents/DataSciencePortfolio/data-science-r/.RData")
